<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1026. 节点与其祖先之间的最大差值 - 每日一题0418</title>
    <url>/leetcode1026/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/maximum-difference-between-node-and-ancestor/">力扣题目链接</a></p>
<p><strong>给定二叉树的根节点 root，找出存在于 不同 节点 A 和 B 之间的最大值 V，其中 V &#x3D; |A.val - B.val|，且 A 是 B 的祖先。</strong></p>
<p><strong>（如果 A 的任何子节点之一为 B，或者 A 的任何子节点是 B 的祖先，那么我们认为 A 是 B 的祖先）</strong></p>
<h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><p><img src="/image/leetcode1026/1681810158883.png" alt="1681810158883" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [8,3,10,1,6,null,14,null,null,4,7,13]</span><br><span class="line">输出：7</span><br><span class="line">解释： </span><br><span class="line">我们有大量的节点与其祖先的差值，其中一些如下：</span><br><span class="line">|8 - 3| = 5</span><br><span class="line">|3 - 7| = 4</span><br><span class="line">|8 - 1| = 7</span><br><span class="line">|10 - 13| = 3</span><br><span class="line">在所有可能的差值中，最大值 7 由 |8 - 1| = 7 得出。</span><br></pre></td></tr></table></figure>

<h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><p><img src="/image/leetcode1026/1681810167515.png" alt="1681810167515" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [1,null,2,null,0,3]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>

<h4 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h4><ul>
<li>树中的节点数在 <code>2</code> 到 <code>5000</code> 之间。</li>
<li><code>0 &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li>
</ul>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxAncestorDiff = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> diff = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">diffData</span> = (<span class="params">node,min,max</span>) =&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        diff = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(node.<span class="property">val</span>-min),<span class="title class_">Math</span>.<span class="title function_">abs</span>(node.<span class="property">val</span>-max))</span><br><span class="line">        min = <span class="title class_">Math</span>.<span class="title function_">min</span>(min,node.<span class="property">val</span>)</span><br><span class="line">        max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max,node.<span class="property">val</span>)</span><br><span class="line">        diff = <span class="title class_">Math</span>.<span class="title function_">max</span>(diff,<span class="title function_">diffData</span>(node.<span class="property">left</span>,min,max)) </span><br><span class="line">        diff = <span class="title class_">Math</span>.<span class="title function_">max</span>(diff,<span class="title function_">diffData</span>(node.<span class="property">right</span>,min,max)) </span><br><span class="line">        <span class="keyword">return</span> diff</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">diffData</span>(root,root.<span class="property">val</span>,root.<span class="property">val</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><ul>
<li>时间复杂度</li>
<li>时间复杂度：O(n)，其中n 是二叉树的节点数目。遍历二叉树的所有节点需要O(n)。</li>
<li>空间复杂度：O(n)。最坏情况下，二叉树退化为链表，递归栈的空间为O(n)。</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1043. 分隔数组以得到最大和 - 每日一题0419</title>
    <url>/leetcode1043/</url>
    <content><![CDATA[<h2 id="1043-分隔数组以得到最大和"><a href="#1043-分隔数组以得到最大和" class="headerlink" title="1043. 分隔数组以得到最大和"></a>1043. 分隔数组以得到最大和</h2><p><a href="https://leetcode.cn/problems/partition-array-for-maximum-sum/">力扣题目链接</a></p>
<p>给你一个整数数组 <code>arr</code>，请你将该数组分隔为长度 **最多 **为 k 的一些（连续）子数组。分隔完成后，每个子数组的中的所有值都会变为该子数组中的最大值。</p>
<p>返回将数组分隔变换后能够得到的元素最大和。本题所用到的测试用例会确保答案是一个 32 位整数。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,15,7,9,2,5,10], k = 3</span><br><span class="line">输出：84</span><br><span class="line">解释：数组变为 [15,15,15,9,10,10,10]</span><br></pre></td></tr></table></figure>

<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4</span><br><span class="line">输出：83</span><br></pre></td></tr></table></figure>

<h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><strong>示例 3：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：arr = [1], k = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; arr.length &lt;&#x3D; 500</li>
<li>0 &lt;&#x3D; arr[i] &lt;&#x3D; 10 <sup>9 </sup></li>
<li>1 &lt;&#x3D; k &lt;&#x3D; arr.length</li>
</ul>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">arr</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSumAfterPartitioning = <span class="keyword">function</span>(<span class="params">arr, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = arr.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span>(len &lt;= k) <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr) * len</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="title class_">Array</span>(len+<span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= len; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i - <span class="number">1</span>; j &gt;= <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, i - k); j--)&#123;</span><br><span class="line">            max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max,arr[j])</span><br><span class="line">            dp[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(dp[i], dp[j] + max * (i - j)) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[len]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1056. 易混淆数</title>
    <url>/leetcode1056/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<h2 id="1056-易混淆数"><a href="#1056-易混淆数" class="headerlink" title="1056. 易混淆数"></a>1056. 易混淆数</h2><p><a href="https://leetcode.cn/problems/confusing-number/?envType=study-plan-v2&id=premium-algo-100">力扣题目链接</a><br>给定一个数字 N，当它满足以下条件的时候返回 true：<br>原数字旋转 180° 以后可以得到新的数字。<br>如 0, 1, 6, 8, 9 旋转 180° 以后，得到了新的数字 0, 1, 9, 8, 6 。<br>2, 3, 4, 5, 7 旋转 180° 后，得到的不是数字。<br>易混淆数 (confusing number) 在旋转180°以后，可以得到和原来不同的数，且新数字的每一位都是有效的。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><p><img src="https://assets.leetcode.com/uploads/2019/03/23/1268_1.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：6</span><br><span class="line">输出：true</span><br><span class="line">解释： </span><br><span class="line">把 6 旋转 180° 以后得到 9，9 是有效数字且 9!=6 。</span><br></pre></td></tr></table></figure>

<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><p><img src="https://assets.leetcode.com/uploads/2019/03/23/1268_2.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：89</span><br><span class="line">输出：true</span><br><span class="line">解释: </span><br><span class="line">把 89 旋转 180° 以后得到 68，86 是有效数字且 86!=89 。</span><br></pre></td></tr></table></figure>
<h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><strong>示例 3：</strong></h4><p><img src="https://assets.leetcode.com/uploads/2019/03/23/1268_3.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：11</span><br><span class="line">输出：false</span><br><span class="line">解释：</span><br><span class="line">把 11 旋转 180° 以后得到 11，11 是有效数字但是值保持不变，所以 11 不是易混淆数字。 </span><br></pre></td></tr></table></figure>

<h4 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a><strong>示例 4：</strong></h4><p><img src="https://assets.leetcode.com/uploads/2019/03/23/1268_4.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：25</span><br><span class="line">输出：false</span><br><span class="line">解释：</span><br><span class="line">把 25 旋转 180° 以后得到的不是数字。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>0 &lt;&#x3D; N &lt;&#x3D; 10^9</li>
<li>可以忽略掉旋转后得到的前导零，例如，如果我们旋转后得到 0008 那么该数字就是 8 。</li>
</ul>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> confusingNumber = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;6&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">String</span>(n)</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = str.<span class="property">length</span>-<span class="number">1</span>; i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map[str[i]])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res += map[str[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res !== str</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>1427. 字符串的左右移</title>
    <url>/leetcode1427/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<h2 id="1427-字符串的左右移"><a href="#1427-字符串的左右移" class="headerlink" title="1427. 字符串的左右移"></a>1427. 字符串的左右移</h2><p><a href="https://leetcode.cn/problems/perform-string-shifts/?envType=study-plan-v2&id=premium-algo-100">力扣题目链接</a></p>
<p>给定一个包含小写英文字母的字符串 s 以及一个矩阵 shift，其中 shift[i] &#x3D; [direction, amount]：<br>direction 可以为 0 （表示左移）或 1 （表示右移）。<br>amount 表示 s 左右移的位数。<br>左移 1 位表示移除 s 的第一个字符，并将该字符插入到 s 的结尾。<br>类似地，右移 1 位表示移除 s 的最后一个字符，并将该字符插入到 s 的开头。<br>对这个字符串进行所有操作后，返回最终结果。</p>
<p> </p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abc&quot;, shift = [[0,1],[1,2]]</span><br><span class="line">输出：&quot;cab&quot;</span><br><span class="line">解释：</span><br><span class="line">[0,1] 表示左移 1 位。 &quot;abc&quot; -&gt; &quot;bca&quot;</span><br><span class="line">[1,2] 表示右移 2 位。 &quot;bca&quot; -&gt; &quot;cab&quot;</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abcdefg&quot;, shift = [[1,1],[1,1],[0,2],[1,3]]</span><br><span class="line">输出：&quot;efgabcd&quot;</span><br><span class="line">解释： </span><br><span class="line">[1,1] 表示右移 1 位。 &quot;abcdefg&quot; -&gt; &quot;gabcdef&quot;</span><br><span class="line">[1,1] 表示右移 1 位。 &quot;gabcdef&quot; -&gt; &quot;fgabcde&quot;</span><br><span class="line">[0,2] 表示左移 2 位。 &quot;fgabcde&quot; -&gt; &quot;abcdefg&quot;</span><br><span class="line">[1,3] 表示右移 3 位。 &quot;abcdefg&quot; -&gt; &quot;efgabcd&quot;</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 100</li>
<li>s 只包含小写英文字母</li>
<li>1 &lt;&#x3D; shift.length &lt;&#x3D; 100</li>
<li>shift[i].length &#x3D;&#x3D; 2</li>
<li>0 &lt;&#x3D; shift[i][0] &lt;&#x3D; 1</li>
<li>0 &lt;&#x3D; shift[i][1] &lt;&#x3D; 100</li>
</ul>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">shift</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> stringShift = <span class="keyword">function</span>(<span class="params">s, shift</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = <span class="number">0</span>,len =s.<span class="property">length</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; shift.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(shift[i][<span class="number">0</span>] === <span class="number">0</span>)&#123;</span><br><span class="line">            left = s.<span class="title function_">slice</span>(shift[i][<span class="number">1</span>]%len)</span><br><span class="line">            right = s.<span class="title function_">slice</span>(<span class="number">0</span>,shift[i][<span class="number">1</span>]%len)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left = s.<span class="title function_">slice</span>(-shift[i][<span class="number">1</span>]%len)</span><br><span class="line">            right = s.<span class="title function_">slice</span>(<span class="number">0</span>,-shift[i][<span class="number">1</span>]%len)</span><br><span class="line">        &#125;</span><br><span class="line">        s = left + right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>186. 反转字符串中的单词 II</title>
    <url>/leetcode186/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<h2 id="186-反转字符串中的单词-II"><a href="#186-反转字符串中的单词-II" class="headerlink" title="186. 反转字符串中的单词 II"></a>186. 反转字符串中的单词 II</h2><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string-ii/?envType=study-plan-v2&id=premium-algo-100">力扣题目链接</a></p>
<p>给你一个字符数组 s ，反转其中 单词 的顺序。<br>单词 的定义为：单词是一个由非空格字符组成的序列。s 中的单词将会由单个空格分隔。<br>必须设计并实现 原地 解法来解决此问题，即不分配额外的空间。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = [&quot;t&quot;,&quot;h&quot;,&quot;e&quot;,&quot; &quot;,&quot;s&quot;,&quot;k&quot;,&quot;y&quot;,&quot; &quot;,&quot;i&quot;,&quot;s&quot;,&quot; &quot;,&quot;b&quot;,&quot;l&quot;,&quot;u&quot;,&quot;e&quot;]</span><br><span class="line">输出：[&quot;b&quot;,&quot;l&quot;,&quot;u&quot;,&quot;e&quot;,&quot; &quot;,&quot;i&quot;,&quot;s&quot;,&quot; &quot;,&quot;s&quot;,&quot;k&quot;,&quot;y&quot;,&quot; &quot;,&quot;t&quot;,&quot;h&quot;,&quot;e&quot;]</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = [&quot;a&quot;]</span><br><span class="line">输出：[&quot;a&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 10<sup>5</sup></li>
<li>s[i] 可以是一个英文字母（大写或小写）、数字、或是空格 ‘ ‘ 。</li>
<li>s 中至少存在一个单词</li>
<li>s 不含前导或尾随空格</li>
<li>题目数据保证：s 中的每个单词都由单个空格分隔</li>
</ul>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>本来想直接一行实现，但是需要在原地实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseWords = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>那么则先将数组整体反转，再将单词反转即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[]</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="comment">// return s.join(&#x27;&#x27;).split(&#x27; &#x27;).reverse().join(&#x27; &#x27;).split(&#x27;&#x27;)</span></span><br><span class="line">    s.<span class="title function_">reverse</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reverseFun</span> = (<span class="params">left,right</span>)=&gt;&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            [s[left],s[right]] = [s[right],s[left]]</span><br><span class="line">            left++</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;= s.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] === <span class="string">&#x27; &#x27;</span> || i === s.<span class="property">length</span>)&#123;</span><br><span class="line">            <span class="title function_">reverseFun</span>(start,i-<span class="number">1</span>)</span><br><span class="line">            start = i + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>280. 摆动排序</title>
    <url>/leetcode280/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<h2 id="280-摆动排序"><a href="#280-摆动排序" class="headerlink" title="280. 摆动排序"></a>280. 摆动排序</h2><p><a href="https://leetcode.cn/problems/wiggle-sort/?envType=study-plan-v2&id=premium-algo-100">力扣题目链接</a><br>给你一个的整数数组 nums, 将该数组重新排序后使 nums[0] &lt;&#x3D; nums[1] &gt;&#x3D; nums[2] &lt;&#x3D; nums[3]… <br>输入数组总是有一个有效的答案。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,5,2,1,6,4]</span><br><span class="line">输出：[3,5,1,6,2,4]</span><br><span class="line">解释：[1,6,2,5,3,4]也是有效的答案</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [6,6,5,6,3,8]</span><br><span class="line">输出：[6,6,5,6,3,8]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 5 * 10<sup>4</sup></li>
<li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li>
<li>输入的 nums 保证至少有一个答案。</li>
</ul>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>先排序，再两两交换</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> wiggleSort = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line">    <span class="keyword">let</span> n = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i&lt; n;i += <span class="number">2</span>)&#123;</span><br><span class="line">        [nums[i],nums[i-<span class="number">1</span>]] = [nums[i-<span class="number">1</span>],nums[i]]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return nums</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>624. 数组列表中的最大距离</title>
    <url>/leetcode624/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<h2 id="624-数组列表中的最大距离"><a href="#624-数组列表中的最大距离" class="headerlink" title="624. 数组列表中的最大距离"></a>624. 数组列表中的最大距离</h2><p><a href="https://leetcode.cn/problems/maximum-distance-in-arrays/?envType=study-plan-v2&id=premium-algo-100">力扣题目链接</a><br>给定 m 个数组，每个数组都已经按照升序排好序了。现在你需要从两个不同的数组中选择两个整数（每个数组选一个）并且计算它们的距离。两个整数 a 和 b 之间的距离定义为它们差的绝对值 |a-b| 。你的任务就是去找到最大距离</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： </span><br><span class="line">[[1,2,3],</span><br><span class="line"> [4,5],</span><br><span class="line"> [1,2,3]]</span><br><span class="line">输出： 4</span><br><span class="line">解释：</span><br><span class="line">一种得到答案 4 的方法是从第一个数组或者第三个数组中选择 1，同时从第二个数组中选择 5 。</span><br></pre></td></tr></table></figure>


<p><strong>注意：</strong></p>
<ul>
<li>每个给定数组至少会有 1 个数字。列表中至少有两个非空数组。</li>
<li>所有 m 个数组中的数字总数目在范围 [2, 10000] 内。</li>
<li>m 个数组中所有整数的范围在 [-10000, 10000] 内。</li>
</ul>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">arrays</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDistance = <span class="keyword">function</span>(<span class="params">arrays</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>, min = <span class="title class_">Infinity</span>, max = -<span class="title class_">Infinity</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrays.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> start = arrays[i][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">let</span> end = arrays[i][arrays[i].<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">        res = <span class="title class_">Math</span>.<span class="title function_">max</span>(res,max-start,end-min)</span><br><span class="line">        max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max,end)</span><br><span class="line">        min = <span class="title class_">Math</span>.<span class="title function_">min</span>(min,start)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>尊享面试 100 题目录</title>
    <url>/leetcodeVipInterview/</url>
    <content><![CDATA[<p><img src="/image/leetcodVipInterview/1681874173382.png" alt="1681874173382" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>概述：</p>
<ul>
<li>专为会员定制面试题单</li>
<li>涵盖完整知识架构与更多会员面试真题</li>
<li>精心布局刷题顺序查漏补缺</li>
<li>适合需要在 3 个月以内准备面试的用户</li>
</ul>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="数组-x2F-字符串"><a href="#数组-x2F-字符串" class="headerlink" title="数组 &#x2F; 字符串"></a>数组 &#x2F; 字符串</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="https://dwmorning.github.io/leetcode624/">624. 数组列表中的最大距离</a></td>
<td>贪心，数组</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>2</td>
<td><a href="https://dwmorning.github.io/leetcode280/">280. 摆动排序</a></td>
<td>贪心，数组，排序</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>3</td>
<td><a href="https://dwmorning.github.io/leetcode1056/">1056. 易混淆数</a></td>
<td>数学</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>4</td>
<td><a href="https://dwmorning.github.io/leetcode1427/">1427. 字符串的左右移</a></td>
<td>数组，数学，字符串</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>5</td>
<td><a href="https://dwmorning.github.io/leetcode161/">161. 相隔为 1 的编辑距离</a></td>
<td>双指针，字符串</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>6</td>
<td><a href="https://dwmorning.github.io/leetcode186/">186. 反转字符串中的单词 II</a></td>
<td>双指针，字符串</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>7</td>
<td><a href="https://dwmorning.github.io/leetcode1055/">1055. 形成字符串的最短路径</a></td>
<td>贪心，双指针，字符串</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
</tbody></table>
<h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>8</td>
<td><a href="https://dwmorning.github.io/leetcode159/">至多包含两个不同字符的最长子串</a></td>
<td>哈希表，字符串，滑动窗口</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>9</td>
<td><a href="https://dwmorning.github.io/leetcode340/">至多包含 K 个不同字符的最长子串</a></td>
<td>哈希表，字符串，滑动窗口</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>10</td>
<td><a href="https://dwmorning.github.io/leetcode487/">最大连续1的个数 II</a></td>
<td>数组，动态规划，滑动窗口</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>11</td>
<td><a href="https://dwmorning.github.io/leetcode1100/">长度为 K 的无重复字符子串</a></td>
<td>哈希表，字符串，滑动窗口</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
</tbody></table>
<h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>12</td>
<td>找出变位映射</td>
<td>数组，哈希表</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>13</td>
<td>回文排列</td>
<td>位运算，哈希表，字符串</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>14</td>
<td>句子相似性</td>
<td>数组，哈希表，字符串</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>15</td>
<td><a href="">单行键盘</a></td>
<td>哈希表，字符串</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>16</td>
<td>移位字符串分组</td>
<td>数组，哈希表，字符串</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>17</td>
<td>最大唯一数</td>
<td>数组，哈希表，排序</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>18</td>
<td>数元素</td>
<td>数组，哈希表</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>19</td>
<td><a href="https://dwmorning.github.io/leetcode1198/">找出所有行中最小公共元素</a></td>
<td>数组, 二分查找, 哈希表, 计数矩阵</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
</tbody></table>
<h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>20</td>
<td>有效的单词方块</td>
<td>数组，矩阵</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>21</td>
<td>孤独像素 I</td>
<td>数组，哈希表，矩阵</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>22</td>
<td>稀疏矩阵的乘法</td>
<td>数组，哈希表，矩阵</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>23</td>
<td>粉碎糖果</td>
<td>数组，哈希表，矩阵，模拟</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
</tbody></table>
<h3 id="区间集合"><a href="#区间集合" class="headerlink" title="区间集合"></a>区间集合</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>24</td>
<td>缺失的区间</td>
<td>数组</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>25</td>
<td>会议室</td>
<td>数组，排序</td>
<td><font color="#15bd66">简单 </font></td>
</tr>
<tr>
<td>26</td>
<td>会议室 II</td>
<td>贪心，数组，双指针，前缀和排序堆（优先队列）</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>27</td>
<td>给字符串添加加粗标签</td>
<td>字典树，数组，哈希表，字符串匹配</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>28</td>
<td>删除区间</td>
<td>数组</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
</tbody></table>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>29</td>
<td>三元表达式解析器</td>
<td>栈，递归，字符串</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>30</td>
<td>寻找排列</td>
<td>栈，贪心，数组，字符串</td>
<td><font color="#ffb800">中等 </font></td>
</tr>
<tr>
<td>31</td>
<td>基本计算器 III</td>
<td>栈，递归，，数学，字符串</td>
<td><font color="#ff334b">困难</font></td>
</tr>
</tbody></table>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>32</td>
<td>数据流中的移动平均值</td>
<td></td>
<td></td>
</tr>
<tr>
<td>33</td>
<td>第一个唯一数字</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>34</td>
<td>删除链表 M 个节点之后的 N 个节点</td>
<td></td>
<td></td>
</tr>
<tr>
<td>35</td>
<td>循环有序列表的插入</td>
<td></td>
<td></td>
</tr>
<tr>
<td>36</td>
<td>给单链表加一</td>
<td></td>
<td></td>
</tr>
<tr>
<td>37</td>
<td>逆序打印不可变链表</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>38</td>
<td>二叉树最长连续序列</td>
<td></td>
<td></td>
</tr>
<tr>
<td>39</td>
<td>二叉树中最长的连续序列</td>
<td></td>
<td></td>
</tr>
<tr>
<td>40</td>
<td>统计同值子树</td>
<td></td>
<td></td>
</tr>
<tr>
<td>41</td>
<td>子树的最大平均值</td>
<td></td>
<td></td>
</tr>
<tr>
<td>42</td>
<td>二叉树的边界</td>
<td></td>
<td></td>
</tr>
<tr>
<td>43</td>
<td>寻找二叉树的叶子节点</td>
<td></td>
<td></td>
</tr>
<tr>
<td>44</td>
<td>二叉树的垂直遍历</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>45</td>
<td>二叉树最长连续序列</td>
<td></td>
<td></td>
</tr>
<tr>
<td>46</td>
<td>二叉树中最长的连续序列</td>
<td></td>
<td></td>
</tr>
<tr>
<td>47</td>
<td>统计同值子树</td>
<td></td>
<td></td>
</tr>
<tr>
<td>48</td>
<td>子树的最大平均值</td>
<td></td>
<td></td>
</tr>
<tr>
<td>49</td>
<td>二叉树的边界</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="N-叉树"><a href="#N-叉树" class="headerlink" title="N 叉树"></a>N 叉树</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>50</td>
<td>克隆 N 叉树</td>
<td></td>
<td></td>
</tr>
<tr>
<td>51</td>
<td>找到 N 叉树的根节点</td>
<td></td>
<td></td>
</tr>
<tr>
<td>52</td>
<td>N 叉树的直径</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>53</td>
<td>搜寻名人</td>
<td></td>
<td></td>
</tr>
<tr>
<td>54</td>
<td>杀掉进程</td>
<td></td>
<td></td>
</tr>
<tr>
<td>55</td>
<td>无向图中连通分量的数目</td>
<td></td>
<td></td>
</tr>
<tr>
<td>56</td>
<td>从始点到终点的所有路径</td>
<td></td>
<td></td>
</tr>
<tr>
<td>57</td>
<td>网络爬虫</td>
<td></td>
<td></td>
</tr>
<tr>
<td>58</td>
<td>岛屿数量 II</td>
<td></td>
<td></td>
</tr>
<tr>
<td>59</td>
<td>不同岛屿的数量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>60</td>
<td>并行课程</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="图-广度优先搜索"><a href="#图-广度优先搜索" class="headerlink" title="图 - 广度优先搜索"></a>图 - 广度优先搜索</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>61</td>
<td>迷宫</td>
<td></td>
<td></td>
</tr>
<tr>
<td>62</td>
<td>迷宫 II</td>
<td></td>
<td></td>
</tr>
<tr>
<td>63</td>
<td>迷宫 III</td>
<td></td>
<td></td>
</tr>
<tr>
<td>64</td>
<td>进击的骑士</td>
<td></td>
<td></td>
</tr>
<tr>
<td>65</td>
<td>墙与门</td>
<td></td>
<td></td>
</tr>
<tr>
<td>66</td>
<td>离建筑物最近的距离</td>
<td></td>
<td></td>
</tr>
<tr>
<td>67</td>
<td>火星词典</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>68</td>
<td>设计内存文件系统</td>
<td></td>
<td></td>
</tr>
<tr>
<td>69</td>
<td>设计搜索自动补全系统</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>70</td>
<td>前五科的均分</td>
<td></td>
<td></td>
</tr>
<tr>
<td>71</td>
<td>连接棒材的最低费用</td>
<td></td>
<td></td>
</tr>
<tr>
<td>72</td>
<td>校园自行车分配</td>
<td></td>
<td></td>
</tr>
<tr>
<td>73</td>
<td>K 距离间隔重排字符串</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>74</td>
<td>等差数列中缺失的数字</td>
<td></td>
<td></td>
</tr>
<tr>
<td>75</td>
<td>有序数组中的缺失元素</td>
<td></td>
<td></td>
</tr>
<tr>
<td>76</td>
<td>找到最大整数的索引</td>
<td></td>
<td></td>
</tr>
<tr>
<td>77</td>
<td>检查一个数是否在数组中占绝大多数</td>
<td></td>
<td></td>
</tr>
<tr>
<td>78</td>
<td>分享巧克力</td>
<td></td>
<td></td>
</tr>
<tr>
<td>79</td>
<td>子数组最大平均数 II</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>80</td>
<td>设计井字棋</td>
<td></td>
<td></td>
</tr>
<tr>
<td>81</td>
<td>贪吃蛇</td>
<td></td>
<td></td>
</tr>
<tr>
<td>82</td>
<td>迭代压缩字符串</td>
<td></td>
<td></td>
</tr>
<tr>
<td>83</td>
<td>字符串的编码与解码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>84</td>
<td>锯齿迭代器</td>
<td></td>
<td></td>
</tr>
<tr>
<td>85</td>
<td>最大栈</td>
<td></td>
<td></td>
</tr>
<tr>
<td>86</td>
<td>力扣排行榜</td>
<td></td>
<td></td>
</tr>
<tr>
<td>87</td>
<td>序列化和反序列化 N 叉树</td>
<td></td>
<td></td>
</tr>
<tr>
<td>88</td>
<td>将 N 叉树编码为二叉树</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>89</td>
<td>中心对称数 II</td>
<td></td>
<td></td>
</tr>
<tr>
<td>90</td>
<td>因子的组合</td>
<td></td>
<td></td>
</tr>
<tr>
<td>91</td>
<td>花括号展开</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>92</td>
<td>迷宫</td>
<td></td>
<td></td>
</tr>
<tr>
<td>93</td>
<td>迷宫 II</td>
<td></td>
<td></td>
</tr>
<tr>
<td>94</td>
<td>迷宫 III</td>
<td></td>
<td></td>
</tr>
<tr>
<td>95</td>
<td>进击的骑士</td>
<td></td>
<td></td>
</tr>
<tr>
<td>96</td>
<td>墙与门</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>97</td>
<td>阿姆斯特朗数</td>
<td></td>
<td></td>
</tr>
<tr>
<td>98</td>
<td>统计只含单一字母的子串</td>
<td></td>
<td></td>
</tr>
<tr>
<td>99</td>
<td>找出隐藏数组中出现次数最多的元素</td>
<td></td>
<td></td>
</tr>
<tr>
<td>100</td>
<td>矩阵中 1 的最大数量</td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>2413. 最小偶倍数</title>
    <url>/leetcode2413/</url>
    <content><![CDATA[<h2 id="2413-最小偶倍数"><a href="#2413-最小偶倍数" class="headerlink" title="2413. 最小偶倍数"></a>2413. 最小偶倍数</h2><p><a href="https://leetcode.cn/problems/smallest-even-multiple/">力扣链接</a></p>
<p>给你一个正整数 n ，返回 2 和 n 的最小公倍数（正整数）。</p>
<p><strong>#### *<em>示例 1：*</em></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 5</span><br><span class="line">输出：10</span><br><span class="line">解释：5 和 2 的最小公倍数是 10 。</span><br></pre></td></tr></table></figure>

<p><strong>#### *<em>示例 2：*</em></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 6</span><br><span class="line">输出：6</span><br><span class="line">解释：6 和 2 的最小公倍数是 6 。注意数字会是它自身的倍数。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 150</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一行实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> smallestEvenMultiple = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n%<span class="number">2</span>===<span class="number">1</span> ? <span class="number">2</span>*n : n</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试突破：Vue</title>
    <url>/leetbookVue/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="81bc925552f291773495401ee2aa52ec80b5b850b51812a4bba5a752b829fa85">ff5bd91e40b47e4b70872304ecb021a0996dd0de20decd455d33d4a3c9e20cfa</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码界面提示说明</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>leetbook</category>
      </categories>
      <tags>
        <tag>leetbook</tag>
        <tag>vue</tag>
        <tag>面试</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>1027. 最长等差数列</title>
    <url>/leetcode1027/</url>
    <content><![CDATA[<h2 id="1043-分隔数组以得到最大和"><a href="#1043-分隔数组以得到最大和" class="headerlink" title="1043. 分隔数组以得到最大和"></a>1043. 分隔数组以得到最大和</h2><p><a href="https://leetcode.cn/problems/longest-arithmetic-subsequence/">力扣题目链接</a></p>
<p>给你一个整数数组 nums，返回 nums 中最长等差子序列的长度。</p>
<p>回想一下，nums 的子序列是一个列表 nums[i1], nums[i2], …, nums[ik] ，且 0 &lt;&#x3D; i1 &lt; i2 &lt; … &lt; ik &lt;&#x3D; nums.length - 1。并且如果 seq[i+1] - seq[i]( 0 &lt;&#x3D; i &lt; seq.length - 1) 的值都相同，那么序列 seq 是等差的。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,6,9,12]</span><br><span class="line">输出：4</span><br><span class="line">解释： </span><br><span class="line">整个数组是公差为 3 的等差数列。</span><br></pre></td></tr></table></figure>

<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [9,4,7,2,10]</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">最长的等差子序列是 [4,7,10]。</span><br></pre></td></tr></table></figure>

<h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><strong>示例 3：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [20,1,15,3,10,5,8]</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">最长的等差子序列是 [20,15,10,5]。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 1000</code></li>
<li><code>0 &lt;= nums[i] &lt;= 500</code></li>
</ul>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestArithSeqLength = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> dp = <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">()=&gt;</span><span class="keyword">new</span> <span class="title class_">Map</span>())</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">let</span> seq = nums[i] - nums[j]</span><br><span class="line">            <span class="keyword">let</span> count = dp[j].<span class="title function_">get</span>(seq) || <span class="number">1</span></span><br><span class="line">            dp[i].<span class="title function_">set</span>(seq,count+<span class="number">1</span>)</span><br><span class="line">            res = <span class="title class_">Math</span>.<span class="title function_">max</span>(res,count+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1055. 形成字符串的最短路径</title>
    <url>/leetcode1055/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<h2 id="1055-形成字符串的最短路径"><a href="#1055-形成字符串的最短路径" class="headerlink" title="1055. 形成字符串的最短路径"></a>1055. 形成字符串的最短路径</h2><p><a href="https://leetcode.cn/problems/shortest-way-to-form-string">力扣题目链接</a><br>对于任何字符串，我们可以通过删除其中一些字符（也可能不删除）来构造该字符串的 子序列 。(例如，“ace” 是 “abcde” 的子序列，而 “aec” 不是)。</p>
<p>给定源字符串 source 和目标字符串 target，返回 源字符串 source 中能通过串联形成目标字符串 target 的 子序列 的最小数量 。如果无法通过串联源字符串中的子序列来构造目标字符串，则返回 -1。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：source = &quot;abc&quot;, target = &quot;abcbc&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：目标字符串 &quot;abcbc&quot; 可以由 &quot;abc&quot; 和 &quot;bc&quot; 形成，它们都是源字符串 &quot;abc&quot; 的子序列。</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：source = &quot;abc&quot;, target = &quot;acdbc&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：由于目标字符串中包含字符 &quot;d&quot;，所以无法由源字符串的子序列构建目标字符串。</span><br></pre></td></tr></table></figure>
<h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><strong>示例 3：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：source = &quot;xyz&quot;, target = &quot;xzyxz&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：目标字符串可以按如下方式构建： &quot;xz&quot; + &quot;y&quot; + &quot;xz&quot;。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; source.length, target.length &lt;&#x3D; 1000</li>
<li>source 和 target 仅包含英文小写字母。</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">source</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> shortestWay = <span class="keyword">function</span>(<span class="params">source, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>, s = <span class="number">0</span>, t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(t&lt;target.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(source.<span class="title function_">indexOf</span>(target[t]) === -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(source[s] === target[t])&#123;</span><br><span class="line">            s++</span><br><span class="line">            t++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s&gt;=source.<span class="property">length</span>)&#123;</span><br><span class="line">            res++</span><br><span class="line">            s = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t&gt;=target.<span class="property">length</span> &amp;&amp; s!==<span class="number">0</span>) res++</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>1100. 长度为 K 的无重复字符子串</title>
    <url>/leetcode1100/</url>
    <content><![CDATA[<h2 id="1100-长度为-K-的无重复字符子串"><a href="#1100-长度为-K-的无重复字符子串" class="headerlink" title="1100. 长度为 K 的无重复字符子串"></a>1100. 长度为 K 的无重复字符子串</h2><blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<p><a href="https://leetcode.cn/problems/find-k-length-substrings-with-no-repeated-characters/?envType=study-plan-v2&id=premium-algo-100">力扣题目链接</a><br>给你一个字符串 S，找出所有长度为 K 且不含重复字符的子串，请你返回全部满足要求的子串的 数目。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：S = &quot;havefunonleetcode&quot;, K = 5</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">这里有 6 个满足题意的子串，分别是：&#x27;havef&#x27;,&#x27;avefu&#x27;,&#x27;vefun&#x27;,&#x27;efuno&#x27;,&#x27;etcod&#x27;,&#x27;tcode&#x27;。</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：S = &quot;home&quot;, K = 5</span><br><span class="line">输出：0</span><br><span class="line">解释：</span><br><span class="line">注意：K 可能会大于 S 的长度。在这种情况下，就无法找到任何长度为 K 的子串。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; S.length &lt;&#x3D; 10^4</li>
<li>S 中的所有字符均为小写英文字母</li>
<li>1 &lt;&#x3D; K &lt;&#x3D; 10^4</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numKLenSubstrNoRepeats = <span class="keyword">function</span>(<span class="params">s, k</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span>&lt;k) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = k-<span class="number">1</span>; i&lt;s.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> str = s.<span class="title function_">slice</span>(i-k+<span class="number">1</span>,i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span>(set.<span class="property">size</span> === k)&#123;</span><br><span class="line">            arr.<span class="title function_">push</span>(str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="property">length</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numKLenSubstrNoRepeats = <span class="keyword">function</span>(<span class="params">s, k</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span>&lt;k) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> arr = [], res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(right&lt;s.<span class="property">length</span>)&#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(s[right])</span><br><span class="line">        <span class="keyword">while</span>(arr.<span class="title function_">indexOf</span>(s[right]) !== arr.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">            arr.<span class="title function_">shift</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="property">length</span>&gt;=k)&#123;</span><br><span class="line">            res++</span><br><span class="line">        &#125;</span><br><span class="line">        right++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>1105. 填充书架</title>
    <url>/leetcode1105/</url>
    <content><![CDATA[<h2 id="1105-填充书架"><a href="#1105-填充书架" class="headerlink" title="1105. 填充书架"></a>1105. 填充书架</h2><p><a href="https://leetcode.cn/problems/filling-bookcase-shelves/">力扣题目链接</a><br>给定一个数组 books ，其中 books[i] &#x3D; [thicknessi, heighti] 表示第 i 本书的厚度和高度。你也会得到一个整数 shelfWidth 。</p>
<p>按顺序 将这些书摆放到总宽度为 shelfWidth 的书架上。</p>
<p>先选几本书放在书架上（它们的厚度之和小于等于书架的宽度 shelfWidth ），然后再建一层书架。重复这个过程，直到把所有的书都放在书架上。</p>
<p>需要注意的是，在上述过程的每个步骤中，摆放书的顺序与你整理好的顺序相同。</p>
<ul>
<li>例如，如果这里有 5 本书，那么可能的一种摆放情况是：第一和第二本书放在第一层书架上，第三本书放在第二层书架上，第四和第五本书放在最后一层书架上。<br>每一层所摆放的书的最大高度就是这一层书架的层高，书架整体的高度为各层高之和。</li>
</ul>
<p>以这种方式布置书架，返回书架整体可能的最小高度。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><p><img src="https://assets.leetcode.com/uploads/2019/06/24/shelves.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">3 层书架的高度和为 1 + 3 + 2 = 6 。</span><br><span class="line">第 2 本书不必放在第一层书架上。</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: books = [[1,3],[2,4],[3,2]], shelfWidth = 6</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; books.length &lt;&#x3D; 1000</li>
<li>1 &lt;&#x3D; thicknessi &lt;&#x3D; shelfWidth &lt;&#x3D; 1000</li>
<li>1 &lt;&#x3D; heighti &lt;&#x3D; 1000</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">books</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">shelfWidth</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minHeightShelves = <span class="keyword">function</span>(<span class="params">books, shelfWidth</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = books.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> dp = <span class="title class_">Array</span>(n+<span class="number">1</span>).<span class="title function_">fill</span>(<span class="title class_">Infinity</span>)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> maxHeight = <span class="number">0</span>, curThick = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i; j&gt;= <span class="number">0</span>;j--)&#123;</span><br><span class="line">            curThick += books[j][<span class="number">0</span>] </span><br><span class="line">            <span class="keyword">if</span>(curThick &gt; shelfWidth) <span class="keyword">break</span></span><br><span class="line">            maxHeight = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxHeight,books[j][<span class="number">1</span>])</span><br><span class="line">            dp[i+<span class="number">1</span>] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[i+<span class="number">1</span>],dp[j]+maxHeight)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>1198. 找出所有行中最小公共元素</title>
    <url>/leetcode1198/</url>
    <content><![CDATA[<h2 id="1198-找出所有行中最小公共元素"><a href="#1198-找出所有行中最小公共元素" class="headerlink" title="1198. 找出所有行中最小公共元素"></a>1198. 找出所有行中最小公共元素</h2><blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<p><a href="https://leetcode.cn/problems/find-smallest-common-element-in-all-rows/">力扣题目链接</a><br>给你一个 m x n 的矩阵 mat，其中每一行的元素均符合 严格递增 。请返回 所有行中的 最小公共元素 。<br>如果矩阵中没有这样的公共元素，就请返回 -1。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：mat = [[1,2,3],[2,3,4],[2,3,5]]</span><br><span class="line">输出： 2</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>m &#x3D;&#x3D; mat.length</li>
<li>n &#x3D;&#x3D; mat[i].length</li>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 500</li>
<li>1 &lt;&#x3D; mat[i][j] &lt;&#x3D; 104</li>
<li>mat[i] 已按严格递增顺序排列。</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">mat</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> smallestCommonElement = <span class="keyword">function</span>(<span class="params">mat</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> m = mat.<span class="property">length</span>, n = mat[<span class="number">0</span>].<span class="property">length</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j&lt; n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i === <span class="number">0</span>)&#123;</span><br><span class="line">                map.<span class="title function_">set</span>(mat[i][j],<span class="number">1</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.<span class="title function_">has</span>(mat[i][j]))&#123;</span><br><span class="line">                    map.<span class="title function_">set</span>(mat[i][j],map.<span class="title function_">get</span>(mat[i][j]) + <span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map.<span class="title function_">entries</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(value === m)&#123;</span><br><span class="line">            <span class="keyword">return</span> key</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>159. 至多包含两个不同字符的最长子串</title>
    <url>/leetcode159/</url>
    <content><![CDATA[<h2 id="159-至多包含两个不同字符的最长子串"><a href="#159-至多包含两个不同字符的最长子串" class="headerlink" title="159. 至多包含两个不同字符的最长子串"></a>159. 至多包含两个不同字符的最长子串</h2><blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<p><a href="https://leetcode.cn/problems/longest-substring-with-at-most-two-distinct-characters/">力扣题目链接</a><br>给你一个字符串 s ，请你找出 至多 包含 两个不同字符 的最长子串，并返回该子串的长度。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;eceba&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：满足题目要求的子串是 &quot;ece&quot; ，长度为 3 。</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ccaabbb&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：满足题目要求的子串是 &quot;aabbb&quot; ，长度为 5 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 10<sup>5</sup></li>
<li>s 由英文字母组成</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstringTwoDistinct = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = s.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">3</span>) <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = <span class="number">0</span>, max = <span class="number">2</span></span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">while</span>(right &lt; n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="property">size</span> &lt; <span class="number">3</span>) map.<span class="title function_">set</span>(s[right],right++)</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="property">size</span> === <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> minKey,minValue = <span class="title class_">Infinity</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map.<span class="title function_">entries</span>())&#123;</span><br><span class="line">                <span class="keyword">if</span>(minValue &gt; value)&#123;</span><br><span class="line">                    minValue = value</span><br><span class="line">                    minKey = key</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map.<span class="title function_">delete</span>(minKey)</span><br><span class="line">            left = minValue + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max,right-left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>161. 相隔为 1 的编辑距离</title>
    <url>/leetcode161/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<h2 id="161-相隔为-1-的编辑距离"><a href="#161-相隔为-1-的编辑距离" class="headerlink" title="161. 相隔为 1 的编辑距离"></a>161. 相隔为 1 的编辑距离</h2><p><a href="https://leetcode.cn/problems/one-edit-distance/">力扣题目链接</a><br>给定两个字符串 s 和 t ，如果它们的编辑距离为 1 ，则返回 true ，否则返回 false 。<br>字符串 s 和字符串 t 之间满足编辑距离等于 1 有三种可能的情形：</p>
<ul>
<li>往 s 中插入 恰好一个 字符得到 t</li>
<li>从 s 中删除 恰好一个 字符得到 t</li>
<li>在 s 中用 一个不同的字符 替换 恰好一个 字符得到 t</li>
</ul>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;ab&quot;, t = &quot;acb&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 可以将 &#x27;c&#x27; 插入字符串 s 来得到 t。</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;cab&quot;, t = &quot;ad&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释: 无法通过 1 步操作使 s 变为 t。</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li>0 &lt;&#x3D; s.length, t.length &lt;&#x3D; 10<sup>4</sup></li>
<li>s 和 t 由小写字母，大写字母和数字组成</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isOneEditDistance = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> slen = s.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> tlen = t.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(slen - tlen) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>; i&lt; <span class="title class_">Math</span>.<span class="title function_">min</span>(slen,tlen);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] !== t[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(slen &lt; tlen)&#123;</span><br><span class="line">                <span class="keyword">return</span> s.<span class="title function_">substring</span>(i) === t.<span class="title function_">substring</span>(i+<span class="number">1</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(slen === tlen)&#123;</span><br><span class="line">                <span class="keyword">return</span> s.<span class="title function_">substring</span>(i+<span class="number">1</span>) === t.<span class="title function_">substring</span>(i+<span class="number">1</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.<span class="title function_">substring</span>(i+<span class="number">1</span>) === t.<span class="title function_">substring</span>(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slen !== tlen</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>2418. 按身高排序</title>
    <url>/leetcode2418/</url>
    <content><![CDATA[<h2 id="2418-按身高排序"><a href="#2418-按身高排序" class="headerlink" title="2418. 按身高排序"></a>2418. 按身高排序</h2><p><a href="https://leetcode.cn/problems/sort-the-people/">力扣链接</a></p>
<p>给你一个字符串数组 names ，和一个由 互不相同 的正整数组成的数组 heights 。两个数组的长度均为 n 。<br>对于每个下标 i，names[i] 和 heights[i] 表示第 i 个人的名字和身高。<br>请按身高 降序 顺序返回对应的名字数组 names 。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：names = [&quot;Mary&quot;,&quot;John&quot;,&quot;Emma&quot;], heights = [180,165,170]</span><br><span class="line">输出：[&quot;Mary&quot;,&quot;Emma&quot;,&quot;John&quot;]</span><br><span class="line">解释：Mary 最高，接着是 Emma 和 John 。</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：names = [&quot;Alice&quot;,&quot;Bob&quot;,&quot;Bob&quot;], heights = [155,185,150]</span><br><span class="line">输出：[&quot;Bob&quot;,&quot;Alice&quot;,&quot;Bob&quot;]</span><br><span class="line">解释：第一个 Bob 最高，然后是 Alice 和第二个 Bob 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>n &#x3D;&#x3D; names.length &#x3D;&#x3D; heights.length</li>
<li>1 &lt;&#x3D; n &lt;&#x3D; 10<sup>3</sup></li>
<li>1 &lt;&#x3D; names[i].length &lt;&#x3D; 20</li>
<li>1 &lt;&#x3D; heights[i] &lt;&#x3D; 10<sup>5</sup></li>
<li>names[i] 由大小写英文字母组成</li>
<li>heights 中的所有值互不相同</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">names</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">heights</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortPeople = <span class="keyword">function</span>(<span class="params">names, heights</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>; i&lt; names.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        map.<span class="title function_">set</span>(heights[i],names[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(map)</span><br><span class="line">    arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b[<span class="number">0</span>]-a[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> arr.<span class="title function_">entries</span>())&#123;</span><br><span class="line">        res.<span class="title function_">push</span>(value[<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>340. 至多包含 K 个不同字符的最长子串</title>
    <url>/leetcode340/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<h2 id="340-至多包含-K-个不同字符的最长子串"><a href="#340-至多包含-K-个不同字符的最长子串" class="headerlink" title="340. 至多包含 K 个不同字符的最长子串"></a>340. 至多包含 K 个不同字符的最长子串</h2><p><a href="https://leetcode.cn/problems/longest-substring-with-at-most-k-distinct-characters/">力扣题目链接</a><br>给你一个字符串 s 和一个整数 k ，请你找出 至多 包含 k 个 不同 字符的最长子串，并返回该子串的长度。 </p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;eceba&quot;, k = 2</span><br><span class="line">输出：3</span><br><span class="line">解释：满足题目要求的子串是 &quot;ece&quot; ，长度为 3 。</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;aa&quot;, k = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：满足题目要求的子串是 &quot;aa&quot; ，长度为 2 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 5 * 10<sup>4</sup></li>
<li>0 &lt;&#x3D; k &lt;&#x3D; 50</li>
</ul>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstringKDistinct = <span class="keyword">function</span>(<span class="params">s, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = s.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span> &lt; k) <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = <span class="number">0</span>, max= <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">while</span>(right &lt; n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="property">size</span>&lt;k+<span class="number">1</span>) map.<span class="title function_">set</span>(s[right],right++)</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="property">size</span> === k + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> minKey, minValue = <span class="title class_">Infinity</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map.<span class="title function_">entries</span>())&#123;</span><br><span class="line">                <span class="keyword">if</span>(minValue&gt;value)&#123;</span><br><span class="line">                    minValue = value</span><br><span class="line">                    minKey = key</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map.<span class="title function_">delete</span>(minKey)</span><br><span class="line">            left = minValue + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max,right-left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>487. 最大连续1的个数 II</title>
    <url>/leetcode487/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://dwmorning.github.io/leetcodeVipInterview">尊享面试 100 题</a>是Leetcode会员专享题单</p>
</blockquote>
<h2 id="487-最大连续1的个数-II"><a href="#487-最大连续1的个数-II" class="headerlink" title="487. 最大连续1的个数 II"></a>487. 最大连续1的个数 II</h2><p><a href="https://leetcode.cn/problems/max-consecutive-ones-ii/">力扣题目链接</a><br>给定一个二进制数组 nums ，如果最多可以翻转一个 0 ，则返回数组中连续 1 的最大个数。</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><strong>示例 1：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,0,1,1,0]</span><br><span class="line">输出：4</span><br><span class="line">解释：翻转第一个 0 可以得到最长的连续 1。</span><br><span class="line">     当翻转以后，最大连续 1 的个数为 4。</span><br></pre></td></tr></table></figure>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,0,1,1,0,1]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li>
<li>nums[i] 不是 0 就是 1.</li>
</ul>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMaxConsecutiveOnes = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>, dp0 = <span class="number">0</span>, dp1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i])&#123;</span><br><span class="line">            dp0++</span><br><span class="line">            dp1++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            dp1 =  dp0 + <span class="number">1</span></span><br><span class="line">            dp0 = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="title class_">Math</span>.<span class="title function_">max</span>(res,<span class="title class_">Math</span>.<span class="title function_">max</span>(dp0,dp1))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>尊享面试 100 题</tag>
      </tags>
  </entry>
  <entry>
    <title>react 18 笔记</title>
    <url>/react18Note/</url>
    <content><![CDATA[<h1 id="React18核心概念与类组件使用-–-入门React18第一步"><a href="#React18核心概念与类组件使用-–-入门React18第一步" class="headerlink" title="React18核心概念与类组件使用 – 入门React18第一步"></a>React18核心概念与类组件使用 – 入门React18第一步</h1><h2 id="props细节详解及注意事项"><a href="#props细节详解及注意事项" class="headerlink" title="props细节详解及注意事项"></a>props细节详解及注意事项</h2><h3 id="构造器中获取props数据"><a href="#构造器中获取props数据" class="headerlink" title="构造器中获取props数据"></a>构造器中获取props数据</h3><p>props是我们React父子组件之间通信的对象，那么这个对象在构造器<code>constructor</code>中是获取不到的。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">msg</span> )   <span class="comment">// undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world, &#123;this.props.msg&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">msg</span>=<span class="string">&quot;hi react&quot;</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>可以通过给<code>super()</code>传递props参数是可以做到的，代码如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">msg</span> )   <span class="comment">// hi react</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么React类组件是如何设计的呢？就要对面向对象非常的熟悉，原理分析如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span> = props;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Foo</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> props = &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Bar</span>(props);</span><br><span class="line">b.<span class="property">props</span> = props;</span><br><span class="line">b.<span class="title function_">render</span>();</span><br></pre></td></tr></table></figure>

<h3 id="多属性的传递"><a href="#多属性的传递" class="headerlink" title="多属性的传递"></a>多属性的传递</h3><p>当有非常多的属性要传递的时候，那么会比较麻烦，所以可通过扩展运算形式进行简写。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; msg, username, age &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>( isChecked );</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world, &#123;msg&#125;, &#123;username&#125;, &#123;age&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> info = &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;hi react&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;xiaoming&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> &#123;<span class="attr">...info</span>&#125; /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="给属性添加默认值与类型"><a href="#给属性添加默认值与类型" class="headerlink" title="给属性添加默认值与类型"></a>给属性添加默认值与类型</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的类型需要引入第三方模块才可以生效。</p>
<p>当父子通信的时候，如果只写属性，不写值的话，那么对应的值就是布尔值true。</p>
<h2 id="类组件中事件的使用详解"><a href="#类组件中事件的使用详解" class="headerlink" title="类组件中事件的使用详解"></a>类组件中事件的使用详解</h2><p>首先React中的事件都是采用事件委托的形式，所有的事件都挂载到组件容器上，其次event对象是合成处理过的。一般情况下这些都是内部完成的，我们在使用的时候并不会有什么影响，作为了解即可。</p>
<h3 id="事件中this的处理"><a href="#事件中this的处理" class="headerlink" title="事件中this的处理"></a>事件中this的处理</h3><p>在事件中最重要的就是处理this指向问题了，这里我们推荐采用面向对象中的<code>public class fields</code>语法。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    handleClick = <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;  <span class="comment">//推荐 public class fields</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);   <span class="comment">//对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;   		 <span class="comment">//不推荐 要注意修正指向</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);   <span class="comment">//按钮 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                hello world</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="事件传参处理"><a href="#事件传参处理" class="headerlink" title="事件传参处理"></a>事件传参处理</h3><p>推荐采用函数的高阶方式，具体代码如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    handleClick = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;   <span class="comment">// 高阶函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick(123)&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                hello world</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="state细节详解及React18的自动批处理"><a href="#state细节详解及React18的自动批处理" class="headerlink" title="state细节详解及React18的自动批处理"></a>state细节详解及React18的自动批处理</h2><h3 id="自动批处理"><a href="#自动批处理" class="headerlink" title="自动批处理"></a>自动批处理</h3><p>自动批处理，即有助于减少在状态更改时发生的重新渲染次数。在React18之前也有批处理的，但是在Promise、setTimeout、原生事件中是不起作用的。</p>
<p>实际上自动批处理指的是，同一时机多次调用<code>setState()</code>方法的一种处理机制。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的代码当点击触发后，虽然调用了两次<code>setState()</code>方法，但是只会触发一次<code>render()</code>方法的重新执行。那么这就是所谓的自动批处理机制，这样是有助于性能的，减少重新执行的次数。</p>
<p>而且不管在什么时机下，都不会有问题的，这个在React18版本之前并不是所有的情况都好用的，比如：定时器。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码在React18之前的版本中，将会触发两次<code>render()</code>方法。默认是自动批处理的，当然也可以改成不是自动批处理的方式，通过<code>ReactDOM.flushSync</code>这个方法。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">flushSync</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">flushSync</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p>既然React18对多次调用采用的是自动批处理机制，那么就说明这个<code>setState()</code>方法是异步的，所以要注意方法调用完后，我们的state数据并不会立即发生变化，因为state可能会被先执行了。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">/* this.setState(&#123;</span></span><br><span class="line"><span class="comment">          count: this.state.count + 1</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        console.log( this.state.count ); */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;, <span class="function">()=&gt;</span>&#123;  <span class="comment">//异步执行结束后的回调函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可利用<code>setState()</code>方法的第二个参数来保证数据更新后再去执行。这里还要注意同样的数据修改只会修改一次，可利用<code>setState()</code>的回调函数写法来保证每一次都能触发。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">/* this.setState(&#123;</span></span><br><span class="line"><span class="comment">          count: this.state.count + 1</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        this.setState(&#123;</span></span><br><span class="line"><span class="comment">          count: this.state.count + 1</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        this.setState(&#123;</span></span><br><span class="line"><span class="comment">          count: this.state.count + 1</span></span><br><span class="line"><span class="comment">        &#125;); */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>)=&gt;</span> (&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>)=&gt;</span> (&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>)=&gt;</span> (&#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样页面按钮点击一次，count会从0直接变成了3。</p>
<h2 id="PureComponent与shouldComponentUpdate"><a href="#PureComponent与shouldComponentUpdate" class="headerlink" title="PureComponent与shouldComponentUpdate"></a>PureComponent与shouldComponentUpdate</h2><p>PureComponent与shouldComponentUpdate这两个方法都是为了减少没必要的渲染，React给开发者提供了改善渲染的优化方法。</p>
<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>当我们在调用<code>setState()</code>方法的时候，如果数据没有改变，实际上也会重新触发<code>render()</code>方法。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;this.state.msg&#125;, &#123;this.state.count&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面的<code>render()</code>方法还是会不断的触发，但是实际上这些render触发是没有意义的，所以可以通过<code>shouldComponentUpdate</code>钩子函数进行性能优化处理。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    shouldComponentUpdate = <span class="function">(<span class="params">nextProps, nextState</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msg</span> === nextState.<span class="property">msg</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;this.state.msg&#125;, &#123;this.state.count&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>shouldComponentUpdate()方法的返回值，如果返回false就不进行界面的更新，如果返回true就会进行界面的更新。这样就可以根据传递的值有没有改变来决定是否进行重新的渲染。</p>
<h3 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h3><p>PureComponent表示纯组件，当监控的值比较多的时候，自己去完成判断实在是太麻烦了，所以可以通过PureComponent这个内置的纯组件来自动完成选择性的渲染，即数据改变了重新渲染，数据没改变就不重新渲染。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;this.state.msg&#125;, &#123;this.state.count&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>改成了纯组件后，记得不要直接对数据进行修改，必须通过<code>setState()</code>来完成数据的改变，不然纯组件的特性就会失效。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">list</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">        <span class="comment">/* this.setState(&#123;</span></span><br><span class="line"><span class="comment">          list: [...this.state.list, &#x27;d&#x27;]</span></span><br><span class="line"><span class="comment">        &#125;); */</span></span><br><span class="line">        <span class="comment">//错误✖</span></span><br><span class="line">        <span class="comment">/* this.state.list.push(&#x27;d&#x27;);</span></span><br><span class="line"><span class="comment">        this.setState(&#123;</span></span><br><span class="line"><span class="comment">          list: this.state.list</span></span><br><span class="line"><span class="comment">        &#125;) */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;</span></span><br><span class="line"><span class="language-xml">                        this.state.list.map((v, i)=&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span>&#123;v&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>react</tag>
      </tags>
  </entry>
</search>
